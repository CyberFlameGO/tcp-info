// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tcpinfo.proto

package nl_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// https://datatracker.ietf.org/doc/draft-ietf-tcpm-rfc793bis/
// and uapi/linux/tcp.h
type TCPState int32

const (
	TCPState_INVALID     TCPState = 0
	TCPState_ESTABLISHED TCPState = 1
	TCPState_SYN_SENT    TCPState = 2
	TCPState_SYN_RECV    TCPState = 3
	TCPState_FIN_WAIT1   TCPState = 4
	TCPState_FIN_WAIT2   TCPState = 5
	TCPState_TIME_WAIT   TCPState = 6
	TCPState_CLOSE       TCPState = 7
	TCPState_CLOSE_WAIT  TCPState = 8
	TCPState_LAST_ACK    TCPState = 9
	TCPState_LISTEN      TCPState = 10
	TCPState_CLOSING     TCPState = 11
)

var TCPState_name = map[int32]string{
	0:  "INVALID",
	1:  "ESTABLISHED",
	2:  "SYN_SENT",
	3:  "SYN_RECV",
	4:  "FIN_WAIT1",
	5:  "FIN_WAIT2",
	6:  "TIME_WAIT",
	7:  "CLOSE",
	8:  "CLOSE_WAIT",
	9:  "LAST_ACK",
	10: "LISTEN",
	11: "CLOSING",
}
var TCPState_value = map[string]int32{
	"INVALID":     0,
	"ESTABLISHED": 1,
	"SYN_SENT":    2,
	"SYN_RECV":    3,
	"FIN_WAIT1":   4,
	"FIN_WAIT2":   5,
	"TIME_WAIT":   6,
	"CLOSE":       7,
	"CLOSE_WAIT":  8,
	"LAST_ACK":    9,
	"LISTEN":      10,
	"CLOSING":     11,
}

func (x TCPState) String() string {
	return proto.EnumName(TCPState_name, int32(x))
}
func (TCPState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_tcpinfo_df7f95c3f813d9a5, []int{0}
}

type Protocol int32

const (
	Protocol_IPPROTO_UNUSED Protocol = 0
	Protocol_IPPROTO_TCP    Protocol = 6
	Protocol_IPPROTO_UDP    Protocol = 17
	Protocol_IPPROTO_DCCP   Protocol = 33
)

var Protocol_name = map[int32]string{
	0:  "IPPROTO_UNUSED",
	6:  "IPPROTO_TCP",
	17: "IPPROTO_UDP",
	33: "IPPROTO_DCCP",
}
var Protocol_value = map[string]int32{
	"IPPROTO_UNUSED": 0,
	"IPPROTO_TCP":    6,
	"IPPROTO_UDP":    17,
	"IPPROTO_DCCP":   33,
}

func (x Protocol) String() string {
	return proto.EnumName(Protocol_name, int32(x))
}
func (Protocol) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_tcpinfo_df7f95c3f813d9a5, []int{1}
}

type InetDiagMsgProto_AddressFamily int32

const (
	// NOTE: these are equivalent to AF_... in socket.h, but cannot have the
	// same names since those are macros and will cause collisions.
	// There are many other families, but for now we only care about these.
	InetDiagMsgProto_UNSPEC InetDiagMsgProto_AddressFamily = 0
	InetDiagMsgProto_INET   InetDiagMsgProto_AddressFamily = 2
	InetDiagMsgProto_INET6  InetDiagMsgProto_AddressFamily = 10
)

var InetDiagMsgProto_AddressFamily_name = map[int32]string{
	0:  "UNSPEC",
	2:  "INET",
	10: "INET6",
}
var InetDiagMsgProto_AddressFamily_value = map[string]int32{
	"UNSPEC": 0,
	"INET":   2,
	"INET6":  10,
}

func (x InetDiagMsgProto_AddressFamily) String() string {
	return proto.EnumName(InetDiagMsgProto_AddressFamily_name, int32(x))
}
func (InetDiagMsgProto_AddressFamily) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_tcpinfo_df7f95c3f813d9a5, []int{2, 0}
}

type TCPInfoProto_CAState int32

const (
	TCPInfoProto_TCPF_UNUSED      TCPInfoProto_CAState = 0
	TCPInfoProto_TCPF_CA_Open     TCPInfoProto_CAState = 1
	TCPInfoProto_TCPF_CA_Disorder TCPInfoProto_CAState = 2
	TCPInfoProto_TCPF_CA_CWR      TCPInfoProto_CAState = 4
	TCPInfoProto_TCPF_CA_Recovery TCPInfoProto_CAState = 8
	TCPInfoProto_TCPF_CA_Loss     TCPInfoProto_CAState = 16
)

var TCPInfoProto_CAState_name = map[int32]string{
	0:  "TCPF_UNUSED",
	1:  "TCPF_CA_Open",
	2:  "TCPF_CA_Disorder",
	4:  "TCPF_CA_CWR",
	8:  "TCPF_CA_Recovery",
	16: "TCPF_CA_Loss",
}
var TCPInfoProto_CAState_value = map[string]int32{
	"TCPF_UNUSED":      0,
	"TCPF_CA_Open":     1,
	"TCPF_CA_Disorder": 2,
	"TCPF_CA_CWR":      4,
	"TCPF_CA_Recovery": 8,
	"TCPF_CA_Loss":     16,
}

func (x TCPInfoProto_CAState) String() string {
	return proto.EnumName(TCPInfoProto_CAState_name, int32(x))
}
func (TCPInfoProto_CAState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_tcpinfo_df7f95c3f813d9a5, []int{8, 0}
}

// #define TCPI_HAS_OPT(info, opt) !!(info->tcpi_options & (opt))
type TCPInfoProto_Options int32

const (
	TCPInfoProto_OPT_UNUSED     TCPInfoProto_Options = 0
	TCPInfoProto_OPT_TIMESTAMPS TCPInfoProto_Options = 1
	TCPInfoProto_OPT_SACK       TCPInfoProto_Options = 2
	TCPInfoProto_OPT_WSCALE     TCPInfoProto_Options = 4
	TCPInfoProto_OPT_ECN        TCPInfoProto_Options = 8
	TCPInfoProto_OPT_ECN_SEEN   TCPInfoProto_Options = 16
	TCPInfoProto_OPT_SYN_DATA   TCPInfoProto_Options = 32
)

var TCPInfoProto_Options_name = map[int32]string{
	0:  "OPT_UNUSED",
	1:  "OPT_TIMESTAMPS",
	2:  "OPT_SACK",
	4:  "OPT_WSCALE",
	8:  "OPT_ECN",
	16: "OPT_ECN_SEEN",
	32: "OPT_SYN_DATA",
}
var TCPInfoProto_Options_value = map[string]int32{
	"OPT_UNUSED":     0,
	"OPT_TIMESTAMPS": 1,
	"OPT_SACK":       2,
	"OPT_WSCALE":     4,
	"OPT_ECN":        8,
	"OPT_ECN_SEEN":   16,
	"OPT_SYN_DATA":   32,
}

func (x TCPInfoProto_Options) String() string {
	return proto.EnumName(TCPInfoProto_Options_name, int32(x))
}
func (TCPInfoProto_Options) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_tcpinfo_df7f95c3f813d9a5, []int{8, 1}
}

type EndPoint struct {
	Port                 uint32   `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	Ip                   []byte   `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EndPoint) Reset()         { *m = EndPoint{} }
func (m *EndPoint) String() string { return proto.CompactTextString(m) }
func (*EndPoint) ProtoMessage()    {}
func (*EndPoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_tcpinfo_df7f95c3f813d9a5, []int{0}
}
func (m *EndPoint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EndPoint.Unmarshal(m, b)
}
func (m *EndPoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EndPoint.Marshal(b, m, deterministic)
}
func (dst *EndPoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndPoint.Merge(dst, src)
}
func (m *EndPoint) XXX_Size() int {
	return xxx_messageInfo_EndPoint.Size(m)
}
func (m *EndPoint) XXX_DiscardUnknown() {
	xxx_messageInfo_EndPoint.DiscardUnknown(m)
}

var xxx_messageInfo_EndPoint proto.InternalMessageInfo

func (m *EndPoint) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *EndPoint) GetIp() []byte {
	if m != nil {
		return m.Ip
	}
	return nil
}

// Using slightly different structure than inete_diag_sockid.  Oddly,
// inet_diag.h does not specify the connection family in the sockid struct, but
// instead in the inet_diag_msg.  However, in proto land, we can additionally
// infer the family from the number of bytes in EndPoint.ip.
type InetSocketIDProto struct {
	Source      *EndPoint `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Destination *EndPoint `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
	Interface   uint32    `protobuf:"varint,5,opt,name=interface,proto3" json:"interface,omitempty"`
	// Using fixed64, as this is more efficient for hashes, keys, cookies.
	Cookie               uint64   `protobuf:"fixed64,6,opt,name=cookie,proto3" json:"cookie,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InetSocketIDProto) Reset()         { *m = InetSocketIDProto{} }
func (m *InetSocketIDProto) String() string { return proto.CompactTextString(m) }
func (*InetSocketIDProto) ProtoMessage()    {}
func (*InetSocketIDProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_tcpinfo_df7f95c3f813d9a5, []int{1}
}
func (m *InetSocketIDProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InetSocketIDProto.Unmarshal(m, b)
}
func (m *InetSocketIDProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InetSocketIDProto.Marshal(b, m, deterministic)
}
func (dst *InetSocketIDProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InetSocketIDProto.Merge(dst, src)
}
func (m *InetSocketIDProto) XXX_Size() int {
	return xxx_messageInfo_InetSocketIDProto.Size(m)
}
func (m *InetSocketIDProto) XXX_DiscardUnknown() {
	xxx_messageInfo_InetSocketIDProto.DiscardUnknown(m)
}

var xxx_messageInfo_InetSocketIDProto proto.InternalMessageInfo

func (m *InetSocketIDProto) GetSource() *EndPoint {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *InetSocketIDProto) GetDestination() *EndPoint {
	if m != nil {
		return m.Destination
	}
	return nil
}

func (m *InetSocketIDProto) GetInterface() uint32 {
	if m != nil {
		return m.Interface
	}
	return 0
}

func (m *InetSocketIDProto) GetCookie() uint64 {
	if m != nil {
		return m.Cookie
	}
	return 0
}

// For contents of struct inet_diag_msg.
type InetDiagMsgProto struct {
	// These are 8 bit unsigned.
	Family InetDiagMsgProto_AddressFamily `protobuf:"varint,1,opt,name=family,proto3,enum=InetDiagMsgProto_AddressFamily" json:"family,omitempty"`
	// Assuming for now this is the same as the TCPF_... states in struct tcp_info.
	// So use the same enumeration.
	// TODO - is this the same TCPF state?
	State                TCPState           `protobuf:"varint,2,opt,name=state,proto3,enum=TCPState" json:"state,omitempty"`
	Timer                uint32             `protobuf:"varint,3,opt,name=timer,proto3" json:"timer,omitempty"`
	Retrans              uint32             `protobuf:"varint,4,opt,name=retrans,proto3" json:"retrans,omitempty"`
	SockId               *InetSocketIDProto `protobuf:"bytes,5,opt,name=sock_id,json=sockId,proto3" json:"sock_id,omitempty"`
	Expires              uint32             `protobuf:"varint,6,opt,name=expires,proto3" json:"expires,omitempty"`
	Rqueue               uint32             `protobuf:"varint,7,opt,name=rqueue,proto3" json:"rqueue,omitempty"`
	Wqueue               uint32             `protobuf:"varint,8,opt,name=wqueue,proto3" json:"wqueue,omitempty"`
	Uid                  uint32             `protobuf:"varint,9,opt,name=uid,proto3" json:"uid,omitempty"`
	Inode                uint32             `protobuf:"varint,10,opt,name=inode,proto3" json:"inode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *InetDiagMsgProto) Reset()         { *m = InetDiagMsgProto{} }
func (m *InetDiagMsgProto) String() string { return proto.CompactTextString(m) }
func (*InetDiagMsgProto) ProtoMessage()    {}
func (*InetDiagMsgProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_tcpinfo_df7f95c3f813d9a5, []int{2}
}
func (m *InetDiagMsgProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InetDiagMsgProto.Unmarshal(m, b)
}
func (m *InetDiagMsgProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InetDiagMsgProto.Marshal(b, m, deterministic)
}
func (dst *InetDiagMsgProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InetDiagMsgProto.Merge(dst, src)
}
func (m *InetDiagMsgProto) XXX_Size() int {
	return xxx_messageInfo_InetDiagMsgProto.Size(m)
}
func (m *InetDiagMsgProto) XXX_DiscardUnknown() {
	xxx_messageInfo_InetDiagMsgProto.DiscardUnknown(m)
}

var xxx_messageInfo_InetDiagMsgProto proto.InternalMessageInfo

func (m *InetDiagMsgProto) GetFamily() InetDiagMsgProto_AddressFamily {
	if m != nil {
		return m.Family
	}
	return InetDiagMsgProto_UNSPEC
}

func (m *InetDiagMsgProto) GetState() TCPState {
	if m != nil {
		return m.State
	}
	return TCPState_INVALID
}

func (m *InetDiagMsgProto) GetTimer() uint32 {
	if m != nil {
		return m.Timer
	}
	return 0
}

func (m *InetDiagMsgProto) GetRetrans() uint32 {
	if m != nil {
		return m.Retrans
	}
	return 0
}

func (m *InetDiagMsgProto) GetSockId() *InetSocketIDProto {
	if m != nil {
		return m.SockId
	}
	return nil
}

func (m *InetDiagMsgProto) GetExpires() uint32 {
	if m != nil {
		return m.Expires
	}
	return 0
}

func (m *InetDiagMsgProto) GetRqueue() uint32 {
	if m != nil {
		return m.Rqueue
	}
	return 0
}

func (m *InetDiagMsgProto) GetWqueue() uint32 {
	if m != nil {
		return m.Wqueue
	}
	return 0
}

func (m *InetDiagMsgProto) GetUid() uint32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *InetDiagMsgProto) GetInode() uint32 {
	if m != nil {
		return m.Inode
	}
	return 0
}

// Proto representation for struct tcpvegas_info, in inet_diag.h
type TCPVegasInfoProto struct {
	// Note that tcpv_enabled is represented by the has_xxx in the parent.
	Rttcnt               uint32   `protobuf:"varint,1,opt,name=rttcnt,proto3" json:"rttcnt,omitempty"`
	Rtt                  uint32   `protobuf:"varint,2,opt,name=rtt,proto3" json:"rtt,omitempty"`
	Minrtt               uint32   `protobuf:"varint,3,opt,name=minrtt,proto3" json:"minrtt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TCPVegasInfoProto) Reset()         { *m = TCPVegasInfoProto{} }
func (m *TCPVegasInfoProto) String() string { return proto.CompactTextString(m) }
func (*TCPVegasInfoProto) ProtoMessage()    {}
func (*TCPVegasInfoProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_tcpinfo_df7f95c3f813d9a5, []int{3}
}
func (m *TCPVegasInfoProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TCPVegasInfoProto.Unmarshal(m, b)
}
func (m *TCPVegasInfoProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TCPVegasInfoProto.Marshal(b, m, deterministic)
}
func (dst *TCPVegasInfoProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TCPVegasInfoProto.Merge(dst, src)
}
func (m *TCPVegasInfoProto) XXX_Size() int {
	return xxx_messageInfo_TCPVegasInfoProto.Size(m)
}
func (m *TCPVegasInfoProto) XXX_DiscardUnknown() {
	xxx_messageInfo_TCPVegasInfoProto.DiscardUnknown(m)
}

var xxx_messageInfo_TCPVegasInfoProto proto.InternalMessageInfo

func (m *TCPVegasInfoProto) GetRttcnt() uint32 {
	if m != nil {
		return m.Rttcnt
	}
	return 0
}

func (m *TCPVegasInfoProto) GetRtt() uint32 {
	if m != nil {
		return m.Rtt
	}
	return 0
}

func (m *TCPVegasInfoProto) GetMinrtt() uint32 {
	if m != nil {
		return m.Minrtt
	}
	return 0
}

// Proto representation for struct tcp_dctcp_info, in inet_diag.h
type DCTCPInfoProto struct {
	// Note that dctcp_enabled is represented by the has_xxx in the parent.
	CeState              uint32   `protobuf:"varint,1,opt,name=ce_state,json=ceState,proto3" json:"ce_state,omitempty"`
	Alpha                uint32   `protobuf:"varint,2,opt,name=alpha,proto3" json:"alpha,omitempty"`
	AbEcn                uint32   `protobuf:"varint,3,opt,name=ab_ecn,json=abEcn,proto3" json:"ab_ecn,omitempty"`
	AbTot                uint32   `protobuf:"varint,4,opt,name=ab_tot,json=abTot,proto3" json:"ab_tot,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DCTCPInfoProto) Reset()         { *m = DCTCPInfoProto{} }
func (m *DCTCPInfoProto) String() string { return proto.CompactTextString(m) }
func (*DCTCPInfoProto) ProtoMessage()    {}
func (*DCTCPInfoProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_tcpinfo_df7f95c3f813d9a5, []int{4}
}
func (m *DCTCPInfoProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DCTCPInfoProto.Unmarshal(m, b)
}
func (m *DCTCPInfoProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DCTCPInfoProto.Marshal(b, m, deterministic)
}
func (dst *DCTCPInfoProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DCTCPInfoProto.Merge(dst, src)
}
func (m *DCTCPInfoProto) XXX_Size() int {
	return xxx_messageInfo_DCTCPInfoProto.Size(m)
}
func (m *DCTCPInfoProto) XXX_DiscardUnknown() {
	xxx_messageInfo_DCTCPInfoProto.DiscardUnknown(m)
}

var xxx_messageInfo_DCTCPInfoProto proto.InternalMessageInfo

func (m *DCTCPInfoProto) GetCeState() uint32 {
	if m != nil {
		return m.CeState
	}
	return 0
}

func (m *DCTCPInfoProto) GetAlpha() uint32 {
	if m != nil {
		return m.Alpha
	}
	return 0
}

func (m *DCTCPInfoProto) GetAbEcn() uint32 {
	if m != nil {
		return m.AbEcn
	}
	return 0
}

func (m *DCTCPInfoProto) GetAbTot() uint32 {
	if m != nil {
		return m.AbTot
	}
	return 0
}

// Proto representation for INET_DIAG_SKMEMINFO messages.
// Haven't found a corresponding linux struct, but the message is described
// in https://manpages.debian.org/stretch/manpages/sock_diag.7.en.html
type SocketMemInfoProto struct {
	RmemAlloc            uint32   `protobuf:"varint,1,opt,name=rmem_alloc,json=rmemAlloc,proto3" json:"rmem_alloc,omitempty"`
	Rcvbuf               uint32   `protobuf:"varint,2,opt,name=rcvbuf,proto3" json:"rcvbuf,omitempty"`
	WmemAlloc            uint32   `protobuf:"varint,3,opt,name=wmem_alloc,json=wmemAlloc,proto3" json:"wmem_alloc,omitempty"`
	Sndbuf               uint32   `protobuf:"varint,4,opt,name=sndbuf,proto3" json:"sndbuf,omitempty"`
	FwdAlloc             uint32   `protobuf:"varint,5,opt,name=fwd_alloc,json=fwdAlloc,proto3" json:"fwd_alloc,omitempty"`
	WmemQueued           uint32   `protobuf:"varint,6,opt,name=wmem_queued,json=wmemQueued,proto3" json:"wmem_queued,omitempty"`
	Optmem               uint32   `protobuf:"varint,7,opt,name=optmem,proto3" json:"optmem,omitempty"`
	Backlog              uint32   `protobuf:"varint,8,opt,name=backlog,proto3" json:"backlog,omitempty"`
	Drops                uint32   `protobuf:"varint,9,opt,name=drops,proto3" json:"drops,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SocketMemInfoProto) Reset()         { *m = SocketMemInfoProto{} }
func (m *SocketMemInfoProto) String() string { return proto.CompactTextString(m) }
func (*SocketMemInfoProto) ProtoMessage()    {}
func (*SocketMemInfoProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_tcpinfo_df7f95c3f813d9a5, []int{5}
}
func (m *SocketMemInfoProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SocketMemInfoProto.Unmarshal(m, b)
}
func (m *SocketMemInfoProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SocketMemInfoProto.Marshal(b, m, deterministic)
}
func (dst *SocketMemInfoProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SocketMemInfoProto.Merge(dst, src)
}
func (m *SocketMemInfoProto) XXX_Size() int {
	return xxx_messageInfo_SocketMemInfoProto.Size(m)
}
func (m *SocketMemInfoProto) XXX_DiscardUnknown() {
	xxx_messageInfo_SocketMemInfoProto.DiscardUnknown(m)
}

var xxx_messageInfo_SocketMemInfoProto proto.InternalMessageInfo

func (m *SocketMemInfoProto) GetRmemAlloc() uint32 {
	if m != nil {
		return m.RmemAlloc
	}
	return 0
}

func (m *SocketMemInfoProto) GetRcvbuf() uint32 {
	if m != nil {
		return m.Rcvbuf
	}
	return 0
}

func (m *SocketMemInfoProto) GetWmemAlloc() uint32 {
	if m != nil {
		return m.WmemAlloc
	}
	return 0
}

func (m *SocketMemInfoProto) GetSndbuf() uint32 {
	if m != nil {
		return m.Sndbuf
	}
	return 0
}

func (m *SocketMemInfoProto) GetFwdAlloc() uint32 {
	if m != nil {
		return m.FwdAlloc
	}
	return 0
}

func (m *SocketMemInfoProto) GetWmemQueued() uint32 {
	if m != nil {
		return m.WmemQueued
	}
	return 0
}

func (m *SocketMemInfoProto) GetOptmem() uint32 {
	if m != nil {
		return m.Optmem
	}
	return 0
}

func (m *SocketMemInfoProto) GetBacklog() uint32 {
	if m != nil {
		return m.Backlog
	}
	return 0
}

func (m *SocketMemInfoProto) GetDrops() uint32 {
	if m != nil {
		return m.Drops
	}
	return 0
}

// Proto representation for struct inet_diag_meminfo.
type MemInfoProto struct {
	Rmem                 uint32   `protobuf:"varint,1,opt,name=rmem,proto3" json:"rmem,omitempty"`
	Wmem                 uint32   `protobuf:"varint,2,opt,name=wmem,proto3" json:"wmem,omitempty"`
	Fmem                 uint32   `protobuf:"varint,3,opt,name=fmem,proto3" json:"fmem,omitempty"`
	Tmem                 uint32   `protobuf:"varint,4,opt,name=tmem,proto3" json:"tmem,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MemInfoProto) Reset()         { *m = MemInfoProto{} }
func (m *MemInfoProto) String() string { return proto.CompactTextString(m) }
func (*MemInfoProto) ProtoMessage()    {}
func (*MemInfoProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_tcpinfo_df7f95c3f813d9a5, []int{6}
}
func (m *MemInfoProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MemInfoProto.Unmarshal(m, b)
}
func (m *MemInfoProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MemInfoProto.Marshal(b, m, deterministic)
}
func (dst *MemInfoProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemInfoProto.Merge(dst, src)
}
func (m *MemInfoProto) XXX_Size() int {
	return xxx_messageInfo_MemInfoProto.Size(m)
}
func (m *MemInfoProto) XXX_DiscardUnknown() {
	xxx_messageInfo_MemInfoProto.DiscardUnknown(m)
}

var xxx_messageInfo_MemInfoProto proto.InternalMessageInfo

func (m *MemInfoProto) GetRmem() uint32 {
	if m != nil {
		return m.Rmem
	}
	return 0
}

func (m *MemInfoProto) GetWmem() uint32 {
	if m != nil {
		return m.Wmem
	}
	return 0
}

func (m *MemInfoProto) GetFmem() uint32 {
	if m != nil {
		return m.Fmem
	}
	return 0
}

func (m *MemInfoProto) GetTmem() uint32 {
	if m != nil {
		return m.Tmem
	}
	return 0
}

// Proto representation for struct tcp_bbr_info.
type BBRInfoProto struct {
	Bw                   int64    `protobuf:"varint,1,opt,name=bw,proto3" json:"bw,omitempty"`
	MinRtt               uint32   `protobuf:"varint,2,opt,name=min_rtt,json=minRtt,proto3" json:"min_rtt,omitempty"`
	PacingGain           uint32   `protobuf:"varint,3,opt,name=pacing_gain,json=pacingGain,proto3" json:"pacing_gain,omitempty"`
	CwndGain             uint32   `protobuf:"varint,4,opt,name=cwnd_gain,json=cwndGain,proto3" json:"cwnd_gain,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BBRInfoProto) Reset()         { *m = BBRInfoProto{} }
func (m *BBRInfoProto) String() string { return proto.CompactTextString(m) }
func (*BBRInfoProto) ProtoMessage()    {}
func (*BBRInfoProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_tcpinfo_df7f95c3f813d9a5, []int{7}
}
func (m *BBRInfoProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BBRInfoProto.Unmarshal(m, b)
}
func (m *BBRInfoProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BBRInfoProto.Marshal(b, m, deterministic)
}
func (dst *BBRInfoProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BBRInfoProto.Merge(dst, src)
}
func (m *BBRInfoProto) XXX_Size() int {
	return xxx_messageInfo_BBRInfoProto.Size(m)
}
func (m *BBRInfoProto) XXX_DiscardUnknown() {
	xxx_messageInfo_BBRInfoProto.DiscardUnknown(m)
}

var xxx_messageInfo_BBRInfoProto proto.InternalMessageInfo

func (m *BBRInfoProto) GetBw() int64 {
	if m != nil {
		return m.Bw
	}
	return 0
}

func (m *BBRInfoProto) GetMinRtt() uint32 {
	if m != nil {
		return m.MinRtt
	}
	return 0
}

func (m *BBRInfoProto) GetPacingGain() uint32 {
	if m != nil {
		return m.PacingGain
	}
	return 0
}

func (m *BBRInfoProto) GetCwndGain() uint32 {
	if m != nil {
		return m.CwndGain
	}
	return 0
}

// This proto is intended to precisely represent the raw data from struct tcp_info.
// It corresponds to the linux struct defined in include/uapi/linux/tcpinfo.h
type TCPInfoProto struct {
	State TCPState `protobuf:"varint,1,opt,name=state,proto3,enum=TCPState" json:"state,omitempty"`
	// bitwise OR of CAState enums.
	CaState     uint32 `protobuf:"varint,2,opt,name=ca_state,json=caState,proto3" json:"ca_state,omitempty"`
	Retransmits uint32 `protobuf:"varint,3,opt,name=retransmits,proto3" json:"retransmits,omitempty"`
	Probes      uint32 `protobuf:"varint,4,opt,name=probes,proto3" json:"probes,omitempty"`
	Backoff     uint32 `protobuf:"varint,5,opt,name=backoff,proto3" json:"backoff,omitempty"`
	Options     uint32 `protobuf:"varint,6,opt,name=options,proto3" json:"options,omitempty"`
	// Here are the 6 OPTs broken out as bools.
	TsOpt   bool `protobuf:"varint,601,opt,name=ts_opt,json=tsOpt,proto3" json:"ts_opt,omitempty"`
	SackOpt bool `protobuf:"varint,602,opt,name=sack_opt,json=sackOpt,proto3" json:"sack_opt,omitempty"`
	// wscale_opt determines whether snd_wscale and rcv_wscale are populated.
	// So this is actually redundant with has_snd_wscale and has_rcv_wscale.
	WscaleOpt   bool `protobuf:"varint,603,opt,name=wscale_opt,json=wscaleOpt,proto3" json:"wscale_opt,omitempty"`
	EcnOpt      bool `protobuf:"varint,604,opt,name=ecn_opt,json=ecnOpt,proto3" json:"ecn_opt,omitempty"`
	EcnseenOpt  bool `protobuf:"varint,605,opt,name=ecnseen_opt,json=ecnseenOpt,proto3" json:"ecnseen_opt,omitempty"`
	FastopenOpt bool `protobuf:"varint,606,opt,name=fastopen_opt,json=fastopenOpt,proto3" json:"fastopen_opt,omitempty"`
	// These are 4 bit fields.
	SndWscale uint32 `protobuf:"varint,7,opt,name=snd_wscale,json=sndWscale,proto3" json:"snd_wscale,omitempty"`
	RcvWscale uint32 `protobuf:"varint,8,opt,name=rcv_wscale,json=rcvWscale,proto3" json:"rcv_wscale,omitempty"`
	// This field was recently added as an eighth u8 immediately following
	// tcpi_xxx_wscale bit fields, so inserting it here.
	DeliveryRateAppLimited bool   `protobuf:"varint,801,opt,name=delivery_rate_app_limited,json=deliveryRateAppLimited,proto3" json:"delivery_rate_app_limited,omitempty"`
	Rto                    uint32 `protobuf:"varint,9,opt,name=rto,proto3" json:"rto,omitempty"`
	Ato                    uint32 `protobuf:"varint,10,opt,name=ato,proto3" json:"ato,omitempty"`
	SndMss                 uint32 `protobuf:"varint,11,opt,name=snd_mss,json=sndMss,proto3" json:"snd_mss,omitempty"`
	RcvMss                 uint32 `protobuf:"varint,12,opt,name=rcv_mss,json=rcvMss,proto3" json:"rcv_mss,omitempty"`
	Unacked                uint32 `protobuf:"varint,13,opt,name=unacked,proto3" json:"unacked,omitempty"`
	Sacked                 uint32 `protobuf:"varint,14,opt,name=sacked,proto3" json:"sacked,omitempty"`
	Lost                   uint32 `protobuf:"varint,15,opt,name=lost,proto3" json:"lost,omitempty"`
	Retrans                uint32 `protobuf:"varint,16,opt,name=retrans,proto3" json:"retrans,omitempty"`
	Fackets                uint32 `protobuf:"varint,17,opt,name=fackets,proto3" json:"fackets,omitempty"`
	// Times.
	LastDataSent uint32 `protobuf:"varint,18,opt,name=last_data_sent,json=lastDataSent,proto3" json:"last_data_sent,omitempty"`
	LastAckSent  uint32 `protobuf:"varint,19,opt,name=last_ack_sent,json=lastAckSent,proto3" json:"last_ack_sent,omitempty"`
	LastDataRecv uint32 `protobuf:"varint,20,opt,name=last_data_recv,json=lastDataRecv,proto3" json:"last_data_recv,omitempty"`
	LastAckRecv  uint32 `protobuf:"varint,21,opt,name=last_ack_recv,json=lastAckRecv,proto3" json:"last_ack_recv,omitempty"`
	// Metrics.
	Pmtu         uint32 `protobuf:"varint,22,opt,name=pmtu,proto3" json:"pmtu,omitempty"`
	RcvSsthresh  uint32 `protobuf:"varint,23,opt,name=rcv_ssthresh,json=rcvSsthresh,proto3" json:"rcv_ssthresh,omitempty"`
	Rtt          uint32 `protobuf:"varint,24,opt,name=rtt,proto3" json:"rtt,omitempty"`
	Rttvar       uint32 `protobuf:"varint,25,opt,name=rttvar,proto3" json:"rttvar,omitempty"`
	SndSsthresh  uint32 `protobuf:"varint,26,opt,name=snd_ssthresh,json=sndSsthresh,proto3" json:"snd_ssthresh,omitempty"`
	SndCwnd      uint32 `protobuf:"varint,27,opt,name=snd_cwnd,json=sndCwnd,proto3" json:"snd_cwnd,omitempty"`
	Advmss       uint32 `protobuf:"varint,28,opt,name=advmss,proto3" json:"advmss,omitempty"`
	Reordering   uint32 `protobuf:"varint,29,opt,name=reordering,proto3" json:"reordering,omitempty"`
	RcvRtt       uint32 `protobuf:"varint,30,opt,name=rcv_rtt,json=rcvRtt,proto3" json:"rcv_rtt,omitempty"`
	RcvSpace     uint32 `protobuf:"varint,31,opt,name=rcv_space,json=rcvSpace,proto3" json:"rcv_space,omitempty"`
	TotalRetrans uint32 `protobuf:"varint,32,opt,name=total_retrans,json=totalRetrans,proto3" json:"total_retrans,omitempty"`
	// In tcp.h, these four are 64 bit unsigned.  However, the pacing rates
	// are often max-1.  Since protobufs use varints, we make these signed for
	// compact encoding.
	PacingRate           int64    `protobuf:"varint,33,opt,name=pacing_rate,json=pacingRate,proto3" json:"pacing_rate,omitempty"`
	MaxPacingRate        int64    `protobuf:"varint,34,opt,name=max_pacing_rate,json=maxPacingRate,proto3" json:"max_pacing_rate,omitempty"`
	BytesAcked           int64    `protobuf:"varint,35,opt,name=bytes_acked,json=bytesAcked,proto3" json:"bytes_acked,omitempty"`
	BytesReceived        int64    `protobuf:"varint,36,opt,name=bytes_received,json=bytesReceived,proto3" json:"bytes_received,omitempty"`
	SegsOut              uint32   `protobuf:"varint,37,opt,name=segs_out,json=segsOut,proto3" json:"segs_out,omitempty"`
	SegsIn               uint32   `protobuf:"varint,38,opt,name=segs_in,json=segsIn,proto3" json:"segs_in,omitempty"`
	NotsentBytes         uint32   `protobuf:"varint,39,opt,name=notsent_bytes,json=notsentBytes,proto3" json:"notsent_bytes,omitempty"`
	MinRtt               uint32   `protobuf:"varint,40,opt,name=min_rtt,json=minRtt,proto3" json:"min_rtt,omitempty"`
	DataSegsIn           uint32   `protobuf:"varint,41,opt,name=data_segs_in,json=dataSegsIn,proto3" json:"data_segs_in,omitempty"`
	DataSegsOut          uint32   `protobuf:"varint,42,opt,name=data_segs_out,json=dataSegsOut,proto3" json:"data_segs_out,omitempty"`
	DeliveryRate         int64    `protobuf:"varint,43,opt,name=delivery_rate,json=deliveryRate,proto3" json:"delivery_rate,omitempty"`
	BusyTime             int64    `protobuf:"varint,44,opt,name=busy_time,json=busyTime,proto3" json:"busy_time,omitempty"`
	RwndLimited          int64    `protobuf:"varint,45,opt,name=rwnd_limited,json=rwndLimited,proto3" json:"rwnd_limited,omitempty"`
	SndbufLimited        int64    `protobuf:"varint,46,opt,name=sndbuf_limited,json=sndbufLimited,proto3" json:"sndbuf_limited,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TCPInfoProto) Reset()         { *m = TCPInfoProto{} }
func (m *TCPInfoProto) String() string { return proto.CompactTextString(m) }
func (*TCPInfoProto) ProtoMessage()    {}
func (*TCPInfoProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_tcpinfo_df7f95c3f813d9a5, []int{8}
}
func (m *TCPInfoProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TCPInfoProto.Unmarshal(m, b)
}
func (m *TCPInfoProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TCPInfoProto.Marshal(b, m, deterministic)
}
func (dst *TCPInfoProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TCPInfoProto.Merge(dst, src)
}
func (m *TCPInfoProto) XXX_Size() int {
	return xxx_messageInfo_TCPInfoProto.Size(m)
}
func (m *TCPInfoProto) XXX_DiscardUnknown() {
	xxx_messageInfo_TCPInfoProto.DiscardUnknown(m)
}

var xxx_messageInfo_TCPInfoProto proto.InternalMessageInfo

func (m *TCPInfoProto) GetState() TCPState {
	if m != nil {
		return m.State
	}
	return TCPState_INVALID
}

func (m *TCPInfoProto) GetCaState() uint32 {
	if m != nil {
		return m.CaState
	}
	return 0
}

func (m *TCPInfoProto) GetRetransmits() uint32 {
	if m != nil {
		return m.Retransmits
	}
	return 0
}

func (m *TCPInfoProto) GetProbes() uint32 {
	if m != nil {
		return m.Probes
	}
	return 0
}

func (m *TCPInfoProto) GetBackoff() uint32 {
	if m != nil {
		return m.Backoff
	}
	return 0
}

func (m *TCPInfoProto) GetOptions() uint32 {
	if m != nil {
		return m.Options
	}
	return 0
}

func (m *TCPInfoProto) GetTsOpt() bool {
	if m != nil {
		return m.TsOpt
	}
	return false
}

func (m *TCPInfoProto) GetSackOpt() bool {
	if m != nil {
		return m.SackOpt
	}
	return false
}

func (m *TCPInfoProto) GetWscaleOpt() bool {
	if m != nil {
		return m.WscaleOpt
	}
	return false
}

func (m *TCPInfoProto) GetEcnOpt() bool {
	if m != nil {
		return m.EcnOpt
	}
	return false
}

func (m *TCPInfoProto) GetEcnseenOpt() bool {
	if m != nil {
		return m.EcnseenOpt
	}
	return false
}

func (m *TCPInfoProto) GetFastopenOpt() bool {
	if m != nil {
		return m.FastopenOpt
	}
	return false
}

func (m *TCPInfoProto) GetSndWscale() uint32 {
	if m != nil {
		return m.SndWscale
	}
	return 0
}

func (m *TCPInfoProto) GetRcvWscale() uint32 {
	if m != nil {
		return m.RcvWscale
	}
	return 0
}

func (m *TCPInfoProto) GetDeliveryRateAppLimited() bool {
	if m != nil {
		return m.DeliveryRateAppLimited
	}
	return false
}

func (m *TCPInfoProto) GetRto() uint32 {
	if m != nil {
		return m.Rto
	}
	return 0
}

func (m *TCPInfoProto) GetAto() uint32 {
	if m != nil {
		return m.Ato
	}
	return 0
}

func (m *TCPInfoProto) GetSndMss() uint32 {
	if m != nil {
		return m.SndMss
	}
	return 0
}

func (m *TCPInfoProto) GetRcvMss() uint32 {
	if m != nil {
		return m.RcvMss
	}
	return 0
}

func (m *TCPInfoProto) GetUnacked() uint32 {
	if m != nil {
		return m.Unacked
	}
	return 0
}

func (m *TCPInfoProto) GetSacked() uint32 {
	if m != nil {
		return m.Sacked
	}
	return 0
}

func (m *TCPInfoProto) GetLost() uint32 {
	if m != nil {
		return m.Lost
	}
	return 0
}

func (m *TCPInfoProto) GetRetrans() uint32 {
	if m != nil {
		return m.Retrans
	}
	return 0
}

func (m *TCPInfoProto) GetFackets() uint32 {
	if m != nil {
		return m.Fackets
	}
	return 0
}

func (m *TCPInfoProto) GetLastDataSent() uint32 {
	if m != nil {
		return m.LastDataSent
	}
	return 0
}

func (m *TCPInfoProto) GetLastAckSent() uint32 {
	if m != nil {
		return m.LastAckSent
	}
	return 0
}

func (m *TCPInfoProto) GetLastDataRecv() uint32 {
	if m != nil {
		return m.LastDataRecv
	}
	return 0
}

func (m *TCPInfoProto) GetLastAckRecv() uint32 {
	if m != nil {
		return m.LastAckRecv
	}
	return 0
}

func (m *TCPInfoProto) GetPmtu() uint32 {
	if m != nil {
		return m.Pmtu
	}
	return 0
}

func (m *TCPInfoProto) GetRcvSsthresh() uint32 {
	if m != nil {
		return m.RcvSsthresh
	}
	return 0
}

func (m *TCPInfoProto) GetRtt() uint32 {
	if m != nil {
		return m.Rtt
	}
	return 0
}

func (m *TCPInfoProto) GetRttvar() uint32 {
	if m != nil {
		return m.Rttvar
	}
	return 0
}

func (m *TCPInfoProto) GetSndSsthresh() uint32 {
	if m != nil {
		return m.SndSsthresh
	}
	return 0
}

func (m *TCPInfoProto) GetSndCwnd() uint32 {
	if m != nil {
		return m.SndCwnd
	}
	return 0
}

func (m *TCPInfoProto) GetAdvmss() uint32 {
	if m != nil {
		return m.Advmss
	}
	return 0
}

func (m *TCPInfoProto) GetReordering() uint32 {
	if m != nil {
		return m.Reordering
	}
	return 0
}

func (m *TCPInfoProto) GetRcvRtt() uint32 {
	if m != nil {
		return m.RcvRtt
	}
	return 0
}

func (m *TCPInfoProto) GetRcvSpace() uint32 {
	if m != nil {
		return m.RcvSpace
	}
	return 0
}

func (m *TCPInfoProto) GetTotalRetrans() uint32 {
	if m != nil {
		return m.TotalRetrans
	}
	return 0
}

func (m *TCPInfoProto) GetPacingRate() int64 {
	if m != nil {
		return m.PacingRate
	}
	return 0
}

func (m *TCPInfoProto) GetMaxPacingRate() int64 {
	if m != nil {
		return m.MaxPacingRate
	}
	return 0
}

func (m *TCPInfoProto) GetBytesAcked() int64 {
	if m != nil {
		return m.BytesAcked
	}
	return 0
}

func (m *TCPInfoProto) GetBytesReceived() int64 {
	if m != nil {
		return m.BytesReceived
	}
	return 0
}

func (m *TCPInfoProto) GetSegsOut() uint32 {
	if m != nil {
		return m.SegsOut
	}
	return 0
}

func (m *TCPInfoProto) GetSegsIn() uint32 {
	if m != nil {
		return m.SegsIn
	}
	return 0
}

func (m *TCPInfoProto) GetNotsentBytes() uint32 {
	if m != nil {
		return m.NotsentBytes
	}
	return 0
}

func (m *TCPInfoProto) GetMinRtt() uint32 {
	if m != nil {
		return m.MinRtt
	}
	return 0
}

func (m *TCPInfoProto) GetDataSegsIn() uint32 {
	if m != nil {
		return m.DataSegsIn
	}
	return 0
}

func (m *TCPInfoProto) GetDataSegsOut() uint32 {
	if m != nil {
		return m.DataSegsOut
	}
	return 0
}

func (m *TCPInfoProto) GetDeliveryRate() int64 {
	if m != nil {
		return m.DeliveryRate
	}
	return 0
}

func (m *TCPInfoProto) GetBusyTime() int64 {
	if m != nil {
		return m.BusyTime
	}
	return 0
}

func (m *TCPInfoProto) GetRwndLimited() int64 {
	if m != nil {
		return m.RwndLimited
	}
	return 0
}

func (m *TCPInfoProto) GetSndbufLimited() int64 {
	if m != nil {
		return m.SndbufLimited
	}
	return 0
}

// Parent containing all info gathered through netlink library.
type TCPDiagnosticsProto struct {
	// Info from struct inet_diag_msg, including socket_id;
	InetDiagMsg *InetDiagMsgProto `protobuf:"bytes,1,opt,name=inet_diag_msg,json=inetDiagMsg,proto3" json:"inet_diag_msg,omitempty"`
	// From INET_DIAG_PROTOCOL message.
	DiagProtocol Protocol `protobuf:"varint,2,opt,name=diag_protocol,json=diagProtocol,proto3,enum=Protocol" json:"diag_protocol,omitempty"`
	// From INET_DIAG_CONG message.
	CongestionAlgorithm string `protobuf:"bytes,3,opt,name=congestion_algorithm,json=congestionAlgorithm,proto3" json:"congestion_algorithm,omitempty"`
	// The following three are mutually exclusive, as they provide
	// data from different congestion control strategies.
	//
	// Types that are valid to be assigned to CcInfo:
	//	*TCPDiagnosticsProto_Vegas
	//	*TCPDiagnosticsProto_Dctcp
	//	*TCPDiagnosticsProto_BbrInfo
	CcInfo isTCPDiagnosticsProto_CcInfo `protobuf_oneof:"cc_info"`
	// Data obtained from INET_DIAG_SKMEMINFO.
	SocketMem *SocketMemInfoProto `protobuf:"bytes,7,opt,name=socket_mem,json=socketMem,proto3" json:"socket_mem,omitempty"`
	// Data obtained from INET_DIAG_MEMINFO.
	MemInfo *MemInfoProto `protobuf:"bytes,8,opt,name=mem_info,json=memInfo,proto3" json:"mem_info,omitempty"`
	// Data obtained from struct tcp_info.
	TcpInfo *TCPInfoProto `protobuf:"bytes,9,opt,name=tcp_info,json=tcpInfo,proto3" json:"tcp_info,omitempty"`
	// If there is shutdown info, this is the mask value.
	// Check has_shutdown_mask to determine whether present.
	//
	// Types that are valid to be assigned to Shutdown:
	//	*TCPDiagnosticsProto_ShutdownMask
	Shutdown isTCPDiagnosticsProto_Shutdown `protobuf_oneof:"shutdown"`
	// Timestamp of batch of messages containing this message.
	Timestamp            int64    `protobuf:"varint,11,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TCPDiagnosticsProto) Reset()         { *m = TCPDiagnosticsProto{} }
func (m *TCPDiagnosticsProto) String() string { return proto.CompactTextString(m) }
func (*TCPDiagnosticsProto) ProtoMessage()    {}
func (*TCPDiagnosticsProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_tcpinfo_df7f95c3f813d9a5, []int{9}
}
func (m *TCPDiagnosticsProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TCPDiagnosticsProto.Unmarshal(m, b)
}
func (m *TCPDiagnosticsProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TCPDiagnosticsProto.Marshal(b, m, deterministic)
}
func (dst *TCPDiagnosticsProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TCPDiagnosticsProto.Merge(dst, src)
}
func (m *TCPDiagnosticsProto) XXX_Size() int {
	return xxx_messageInfo_TCPDiagnosticsProto.Size(m)
}
func (m *TCPDiagnosticsProto) XXX_DiscardUnknown() {
	xxx_messageInfo_TCPDiagnosticsProto.DiscardUnknown(m)
}

var xxx_messageInfo_TCPDiagnosticsProto proto.InternalMessageInfo

type isTCPDiagnosticsProto_CcInfo interface {
	isTCPDiagnosticsProto_CcInfo()
}
type isTCPDiagnosticsProto_Shutdown interface {
	isTCPDiagnosticsProto_Shutdown()
}

type TCPDiagnosticsProto_Vegas struct {
	Vegas *TCPVegasInfoProto `protobuf:"bytes,4,opt,name=vegas,proto3,oneof"`
}
type TCPDiagnosticsProto_Dctcp struct {
	Dctcp *DCTCPInfoProto `protobuf:"bytes,5,opt,name=dctcp,proto3,oneof"`
}
type TCPDiagnosticsProto_BbrInfo struct {
	BbrInfo *BBRInfoProto `protobuf:"bytes,6,opt,name=bbr_info,json=bbrInfo,proto3,oneof"`
}
type TCPDiagnosticsProto_ShutdownMask struct {
	ShutdownMask uint32 `protobuf:"varint,10,opt,name=shutdown_mask,json=shutdownMask,proto3,oneof"`
}

func (*TCPDiagnosticsProto_Vegas) isTCPDiagnosticsProto_CcInfo()          {}
func (*TCPDiagnosticsProto_Dctcp) isTCPDiagnosticsProto_CcInfo()          {}
func (*TCPDiagnosticsProto_BbrInfo) isTCPDiagnosticsProto_CcInfo()        {}
func (*TCPDiagnosticsProto_ShutdownMask) isTCPDiagnosticsProto_Shutdown() {}

func (m *TCPDiagnosticsProto) GetCcInfo() isTCPDiagnosticsProto_CcInfo {
	if m != nil {
		return m.CcInfo
	}
	return nil
}
func (m *TCPDiagnosticsProto) GetShutdown() isTCPDiagnosticsProto_Shutdown {
	if m != nil {
		return m.Shutdown
	}
	return nil
}

func (m *TCPDiagnosticsProto) GetInetDiagMsg() *InetDiagMsgProto {
	if m != nil {
		return m.InetDiagMsg
	}
	return nil
}

func (m *TCPDiagnosticsProto) GetDiagProtocol() Protocol {
	if m != nil {
		return m.DiagProtocol
	}
	return Protocol_IPPROTO_UNUSED
}

func (m *TCPDiagnosticsProto) GetCongestionAlgorithm() string {
	if m != nil {
		return m.CongestionAlgorithm
	}
	return ""
}

func (m *TCPDiagnosticsProto) GetVegas() *TCPVegasInfoProto {
	if x, ok := m.GetCcInfo().(*TCPDiagnosticsProto_Vegas); ok {
		return x.Vegas
	}
	return nil
}

func (m *TCPDiagnosticsProto) GetDctcp() *DCTCPInfoProto {
	if x, ok := m.GetCcInfo().(*TCPDiagnosticsProto_Dctcp); ok {
		return x.Dctcp
	}
	return nil
}

func (m *TCPDiagnosticsProto) GetBbrInfo() *BBRInfoProto {
	if x, ok := m.GetCcInfo().(*TCPDiagnosticsProto_BbrInfo); ok {
		return x.BbrInfo
	}
	return nil
}

func (m *TCPDiagnosticsProto) GetSocketMem() *SocketMemInfoProto {
	if m != nil {
		return m.SocketMem
	}
	return nil
}

func (m *TCPDiagnosticsProto) GetMemInfo() *MemInfoProto {
	if m != nil {
		return m.MemInfo
	}
	return nil
}

func (m *TCPDiagnosticsProto) GetTcpInfo() *TCPInfoProto {
	if m != nil {
		return m.TcpInfo
	}
	return nil
}

func (m *TCPDiagnosticsProto) GetShutdownMask() uint32 {
	if x, ok := m.GetShutdown().(*TCPDiagnosticsProto_ShutdownMask); ok {
		return x.ShutdownMask
	}
	return 0
}

func (m *TCPDiagnosticsProto) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TCPDiagnosticsProto) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TCPDiagnosticsProto_OneofMarshaler, _TCPDiagnosticsProto_OneofUnmarshaler, _TCPDiagnosticsProto_OneofSizer, []interface{}{
		(*TCPDiagnosticsProto_Vegas)(nil),
		(*TCPDiagnosticsProto_Dctcp)(nil),
		(*TCPDiagnosticsProto_BbrInfo)(nil),
		(*TCPDiagnosticsProto_ShutdownMask)(nil),
	}
}

func _TCPDiagnosticsProto_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TCPDiagnosticsProto)
	// cc_info
	switch x := m.CcInfo.(type) {
	case *TCPDiagnosticsProto_Vegas:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Vegas); err != nil {
			return err
		}
	case *TCPDiagnosticsProto_Dctcp:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Dctcp); err != nil {
			return err
		}
	case *TCPDiagnosticsProto_BbrInfo:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BbrInfo); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("TCPDiagnosticsProto.CcInfo has unexpected type %T", x)
	}
	// shutdown
	switch x := m.Shutdown.(type) {
	case *TCPDiagnosticsProto_ShutdownMask:
		b.EncodeVarint(10<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.ShutdownMask))
	case nil:
	default:
		return fmt.Errorf("TCPDiagnosticsProto.Shutdown has unexpected type %T", x)
	}
	return nil
}

func _TCPDiagnosticsProto_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TCPDiagnosticsProto)
	switch tag {
	case 4: // cc_info.vegas
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TCPVegasInfoProto)
		err := b.DecodeMessage(msg)
		m.CcInfo = &TCPDiagnosticsProto_Vegas{msg}
		return true, err
	case 5: // cc_info.dctcp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DCTCPInfoProto)
		err := b.DecodeMessage(msg)
		m.CcInfo = &TCPDiagnosticsProto_Dctcp{msg}
		return true, err
	case 6: // cc_info.bbr_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BBRInfoProto)
		err := b.DecodeMessage(msg)
		m.CcInfo = &TCPDiagnosticsProto_BbrInfo{msg}
		return true, err
	case 10: // shutdown.shutdown_mask
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Shutdown = &TCPDiagnosticsProto_ShutdownMask{uint32(x)}
		return true, err
	default:
		return false, nil
	}
}

func _TCPDiagnosticsProto_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TCPDiagnosticsProto)
	// cc_info
	switch x := m.CcInfo.(type) {
	case *TCPDiagnosticsProto_Vegas:
		s := proto.Size(x.Vegas)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TCPDiagnosticsProto_Dctcp:
		s := proto.Size(x.Dctcp)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TCPDiagnosticsProto_BbrInfo:
		s := proto.Size(x.BbrInfo)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// shutdown
	switch x := m.Shutdown.(type) {
	case *TCPDiagnosticsProto_ShutdownMask:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.ShutdownMask))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*EndPoint)(nil), "EndPoint")
	proto.RegisterType((*InetSocketIDProto)(nil), "InetSocketIDProto")
	proto.RegisterType((*InetDiagMsgProto)(nil), "InetDiagMsgProto")
	proto.RegisterType((*TCPVegasInfoProto)(nil), "TCPVegasInfoProto")
	proto.RegisterType((*DCTCPInfoProto)(nil), "DCTCPInfoProto")
	proto.RegisterType((*SocketMemInfoProto)(nil), "SocketMemInfoProto")
	proto.RegisterType((*MemInfoProto)(nil), "MemInfoProto")
	proto.RegisterType((*BBRInfoProto)(nil), "BBRInfoProto")
	proto.RegisterType((*TCPInfoProto)(nil), "TCPInfoProto")
	proto.RegisterType((*TCPDiagnosticsProto)(nil), "TCPDiagnosticsProto")
	proto.RegisterEnum("TCPState", TCPState_name, TCPState_value)
	proto.RegisterEnum("Protocol", Protocol_name, Protocol_value)
	proto.RegisterEnum("InetDiagMsgProto_AddressFamily", InetDiagMsgProto_AddressFamily_name, InetDiagMsgProto_AddressFamily_value)
	proto.RegisterEnum("TCPInfoProto_CAState", TCPInfoProto_CAState_name, TCPInfoProto_CAState_value)
	proto.RegisterEnum("TCPInfoProto_Options", TCPInfoProto_Options_name, TCPInfoProto_Options_value)
}

func init() { proto.RegisterFile("tcpinfo.proto", fileDescriptor_tcpinfo_df7f95c3f813d9a5) }

var fileDescriptor_tcpinfo_df7f95c3f813d9a5 = []byte{
	// 1946 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x57, 0x5d, 0x92, 0xdb, 0xb8,
	0x11, 0xf6, 0x8c, 0x67, 0x24, 0xaa, 0xf5, 0x33, 0x34, 0xec, 0xdd, 0xa5, 0xd7, 0xeb, 0xf5, 0x58,
	0x5e, 0xef, 0x3a, 0x76, 0x56, 0x95, 0x9d, 0x54, 0x92, 0xaa, 0xbc, 0x69, 0x28, 0x79, 0xad, 0xca,
	0x8c, 0x46, 0xa1, 0x64, 0xbb, 0x92, 0x87, 0xb0, 0x20, 0x10, 0x92, 0x59, 0x12, 0x01, 0x86, 0x80,
	0x24, 0xbb, 0x92, 0x03, 0xe4, 0x00, 0x79, 0xc9, 0x63, 0xce, 0x90, 0x6b, 0xe4, 0x02, 0xf9, 0xbd,
	0x41, 0xee, 0x90, 0x6a, 0x00, 0xd4, 0x4f, 0x5c, 0x79, 0x22, 0xfa, 0xeb, 0x46, 0xa3, 0x81, 0xfe,
	0xd0, 0x68, 0x42, 0x53, 0xb3, 0x3c, 0x15, 0x33, 0xd9, 0xc9, 0x0b, 0xa9, 0x65, 0xbb, 0x03, 0x5e,
	0x5f, 0x24, 0x23, 0x99, 0x0a, 0x4d, 0x08, 0x9c, 0xe4, 0xb2, 0xd0, 0xc1, 0xd1, 0xf9, 0xd1, 0xb3,
	0x66, 0x64, 0xc6, 0xa4, 0x05, 0xc7, 0x69, 0x1e, 0x1c, 0x9f, 0x1f, 0x3d, 0x6b, 0x44, 0xc7, 0x69,
	0xde, 0xfe, 0xd3, 0x11, 0xdc, 0x19, 0x08, 0xae, 0xc7, 0x92, 0x2d, 0xb8, 0x1e, 0xf4, 0x46, 0xe8,
	0x85, 0x3c, 0x86, 0x8a, 0x92, 0xab, 0x82, 0x71, 0x33, 0xb7, 0x7e, 0x51, 0xeb, 0x94, 0x4e, 0x23,
	0xa7, 0x20, 0x2f, 0xa0, 0x9e, 0x70, 0xa5, 0x53, 0x41, 0x75, 0x2a, 0x85, 0xf1, 0x78, 0x60, 0xb7,
	0xaf, 0x25, 0x5f, 0x40, 0x2d, 0x15, 0x9a, 0x17, 0x33, 0xca, 0x78, 0x70, 0x6a, 0xc2, 0xd9, 0x01,
	0xe4, 0x53, 0xa8, 0x30, 0x29, 0x17, 0x29, 0x0f, 0x2a, 0xe7, 0x47, 0xcf, 0x2a, 0x91, 0x93, 0xda,
	0xff, 0x39, 0x06, 0x1f, 0x63, 0xeb, 0xa5, 0x74, 0x7e, 0xad, 0xe6, 0x36, 0xb4, 0x9f, 0x41, 0x65,
	0x46, 0xb3, 0x74, 0xf9, 0xc1, 0x84, 0xd6, 0xba, 0x78, 0xd4, 0xf9, 0x5f, 0x93, 0x4e, 0x37, 0x49,
	0x0a, 0xae, 0xd4, 0x4b, 0x63, 0x16, 0x39, 0x73, 0xf2, 0x08, 0x4e, 0x95, 0xa6, 0x9a, 0x9b, 0x50,
	0x5b, 0x17, 0xb5, 0xce, 0x24, 0x1c, 0x8d, 0x11, 0x88, 0x2c, 0x4e, 0xee, 0xc1, 0xa9, 0x4e, 0x33,
	0x5e, 0x04, 0xb7, 0x4d, 0x80, 0x56, 0x20, 0x01, 0x54, 0x0b, 0xae, 0x0b, 0x2a, 0x54, 0x70, 0x62,
	0xf0, 0x52, 0x24, 0x2f, 0xa0, 0xaa, 0x24, 0x5b, 0xc4, 0x69, 0x62, 0xb6, 0x54, 0xbf, 0x20, 0x9d,
	0x8f, 0x4e, 0x12, 0x8f, 0x8b, 0x2d, 0x06, 0x09, 0xba, 0xe1, 0xef, 0xf3, 0xb4, 0xe0, 0xca, 0x6c,
	0xb2, 0x19, 0x95, 0x22, 0xee, 0xbe, 0xf8, 0xed, 0x8a, 0xaf, 0x78, 0x50, 0x35, 0x0a, 0x27, 0x21,
	0xbe, 0xb1, 0xb8, 0x67, 0x71, 0x2b, 0x11, 0x1f, 0x6e, 0xaf, 0xd2, 0x24, 0xa8, 0x19, 0x10, 0x87,
	0x18, 0x78, 0x2a, 0x64, 0xc2, 0x03, 0xb0, 0x81, 0x1b, 0xa1, 0xfd, 0x23, 0x68, 0x1e, 0x1c, 0x04,
	0x01, 0xa8, 0xbc, 0x1e, 0x8e, 0x47, 0xfd, 0xd0, 0xbf, 0x45, 0x3c, 0x38, 0x19, 0x0c, 0xfb, 0x13,
	0xff, 0x98, 0xd4, 0xe0, 0x14, 0x47, 0x3f, 0xf5, 0xa1, 0xfd, 0x1a, 0xee, 0x4c, 0xc2, 0xd1, 0x1b,
	0x3e, 0xa7, 0x6a, 0x20, 0x66, 0xd2, 0x9e, 0x37, 0x86, 0xa7, 0x35, 0x13, 0x25, 0x8d, 0x9c, 0x84,
	0x61, 0x14, 0x5a, 0x9b, 0xc3, 0x6c, 0x46, 0x38, 0x44, 0xcb, 0x2c, 0x15, 0x08, 0xda, 0x03, 0x74,
	0x52, 0x5b, 0x42, 0xab, 0x17, 0x4e, 0xc2, 0xd1, 0xce, 0xe7, 0x7d, 0xf0, 0x18, 0x8f, 0x6d, 0x36,
	0xac, 0xd7, 0x2a, 0xe3, 0xe3, 0x32, 0x09, 0x74, 0x99, 0xbf, 0xa3, 0xce, 0xb1, 0x15, 0xc8, 0x27,
	0x50, 0xa1, 0xd3, 0x98, 0x33, 0x51, 0xe6, 0x86, 0x4e, 0xfb, 0x4c, 0x38, 0x58, 0x4b, 0xed, 0x52,
	0x73, 0x4a, 0xa7, 0x13, 0xa9, 0xdb, 0x7f, 0x38, 0x06, 0x62, 0xb3, 0x70, 0xcd, 0xb3, 0xdd, 0xaa,
	0x0f, 0x01, 0x8a, 0x8c, 0x67, 0x31, 0x5d, 0x2e, 0x25, 0x73, 0xeb, 0xd6, 0x10, 0xe9, 0x22, 0x60,
	0x36, 0xca, 0xd6, 0xd3, 0xd5, 0xcc, 0x2d, 0xed, 0x24, 0x9c, 0xb6, 0xd9, 0x4d, 0xb3, 0xeb, 0xd7,
	0x36, 0xfb, 0xd3, 0x94, 0x48, 0x70, 0x9a, 0x8d, 0xc1, 0x49, 0xe4, 0x01, 0xd4, 0x66, 0x9b, 0xc4,
	0xcd, 0xb2, 0x94, 0xf7, 0x66, 0x9b, 0xc4, 0x4e, 0x7a, 0x04, 0x75, 0xe3, 0xd3, 0x64, 0x34, 0x71,
	0x8c, 0x30, 0xcb, 0xfc, 0xd2, 0x20, 0xe8, 0x55, 0xe6, 0x3a, 0xe3, 0x59, 0x49, 0x0a, 0x2b, 0x21,
	0x8d, 0xa6, 0x94, 0x2d, 0x96, 0x72, 0xee, 0x58, 0x51, 0x8a, 0x78, 0x70, 0x49, 0x21, 0x73, 0xe5,
	0x88, 0x61, 0x85, 0xf6, 0x6f, 0xa0, 0x71, 0x70, 0x06, 0x04, 0x4e, 0x70, 0xc7, 0x65, 0x49, 0xc0,
	0x31, 0x62, 0xb8, 0xb2, 0xdb, 0xb6, 0x19, 0x23, 0x36, 0x43, 0xcc, 0x6e, 0xd7, 0x8c, 0x11, 0x33,
	0x11, 0xd9, 0x7d, 0x9a, 0x71, 0x7b, 0x05, 0x8d, 0xcb, 0xcb, 0x68, 0xe7, 0xbf, 0x05, 0xc7, 0xd3,
	0x8d, 0xf1, 0x7e, 0x3b, 0x3a, 0x9e, 0x6e, 0xc8, 0x67, 0x50, 0xcd, 0x52, 0x11, 0xef, 0x98, 0x82,
	0xa4, 0x88, 0xb4, 0xc6, 0x13, 0xc8, 0x29, 0x4b, 0xc5, 0x3c, 0x9e, 0xd3, 0xb4, 0x4c, 0x2b, 0x58,
	0xe8, 0x7b, 0x9a, 0x0a, 0x3c, 0x3f, 0xb6, 0x11, 0x89, 0x55, 0xdb, 0x25, 0x3d, 0x04, 0x50, 0xd9,
	0xfe, 0x6b, 0x0b, 0x1a, 0x07, 0x8c, 0xda, 0x5e, 0xee, 0xa3, 0xff, 0x73, 0xb9, 0x91, 0x72, 0x34,
	0xde, 0x15, 0x00, 0xa4, 0x1c, 0xb5, 0x94, 0x3b, 0x87, 0xba, 0xbb, 0xd2, 0x59, 0xaa, 0x95, 0x0b,
	0x65, 0x1f, 0xc2, 0x6c, 0xe4, 0x85, 0x9c, 0xf2, 0xb2, 0x04, 0x38, 0xa9, 0xcc, 0x86, 0x9c, 0xcd,
	0x5c, 0x86, 0x4b, 0x11, 0x35, 0x32, 0xc7, 0xd2, 0xb7, 0xbd, 0xee, 0x4e, 0x44, 0x5f, 0x5a, 0xc5,
	0x32, 0xd7, 0xc1, 0xdf, 0xd0, 0x99, 0x17, 0x9d, 0x6a, 0x75, 0x93, 0x6b, 0xf2, 0x39, 0x78, 0x8a,
	0xb2, 0x85, 0xd1, 0xfc, 0xdd, 0x6a, 0xaa, 0x08, 0xa0, 0xee, 0x4b, 0x80, 0x8d, 0x62, 0x74, 0xc9,
	0x8d, 0xf6, 0x1f, 0x56, 0x5b, 0xb3, 0x10, 0xea, 0xb1, 0xb8, 0x30, 0x61, 0x94, 0xff, 0xb4, 0xca,
	0x0a, 0x67, 0x02, 0x35, 0xe7, 0x50, 0xe7, 0x4c, 0x28, 0xce, 0xad, 0xf6, 0x5f, 0x56, 0x0b, 0x0e,
	0x43, 0x8b, 0x36, 0x34, 0x66, 0x54, 0x69, 0x99, 0x3b, 0x93, 0x7f, 0x5b, 0x93, 0x7a, 0x09, 0xa2,
	0xcd, 0x43, 0x00, 0x25, 0x92, 0xd8, 0x2e, 0xe8, 0x18, 0x59, 0x53, 0x22, 0x79, 0x6b, 0x00, 0x73,
	0xb1, 0xd8, 0xba, 0x54, 0x7b, 0xee, 0x62, 0xb1, 0xb5, 0x53, 0xff, 0x1c, 0xee, 0x27, 0x7c, 0x99,
	0xae, 0x79, 0xf1, 0x21, 0x2e, 0xa8, 0xe6, 0x31, 0xcd, 0xf3, 0x78, 0x99, 0x66, 0xa9, 0xe6, 0x49,
	0xf0, 0xe7, 0x8a, 0x59, 0xee, 0xd3, 0xd2, 0x22, 0xa2, 0x9a, 0x77, 0xf3, 0xfc, 0xca, 0xaa, 0x6d,
	0x95, 0x91, 0x65, 0xb1, 0x2b, 0xb4, 0x44, 0x84, 0x6a, 0xe9, 0x4a, 0x1d, 0x0e, 0x91, 0x63, 0x18,
	0x5d, 0xa6, 0x54, 0x50, 0xdf, 0x5e, 0xc1, 0x6b, 0xa5, 0x50, 0x81, 0x71, 0xa1, 0xa2, 0xb1, 0xbd,
	0xd2, 0xa8, 0x08, 0xa0, 0xba, 0x12, 0x94, 0x2d, 0x78, 0x12, 0x34, 0x6d, 0x76, 0x9c, 0x68, 0x6e,
	0xb3, 0x55, 0xb4, 0x9c, 0x2b, 0x8b, 0x13, 0x38, 0x59, 0x4a, 0xa5, 0x83, 0x33, 0xcb, 0x7d, 0x1c,
	0xef, 0xbf, 0x0c, 0xfe, 0xe1, 0xcb, 0x10, 0x40, 0x75, 0x86, 0xf3, 0xb4, 0x0a, 0xee, 0x58, 0x8d,
	0x13, 0xc9, 0x57, 0xd0, 0x5a, 0x52, 0xa5, 0xe3, 0x84, 0x6a, 0x1a, 0x2b, 0x2e, 0x74, 0x40, 0x8c,
	0x41, 0x03, 0xd1, 0x1e, 0xd5, 0x74, 0xcc, 0x05, 0xe6, 0xa4, 0x69, 0xac, 0x90, 0x0f, 0xc6, 0xe8,
	0xae, 0xe5, 0x24, 0x82, 0x5d, 0xb6, 0x30, 0x36, 0x07, 0x9e, 0x0a, 0xce, 0xd6, 0xc1, 0xbd, 0x43,
	0x4f, 0x11, 0x67, 0xeb, 0x03, 0x4f, 0xc6, 0xe8, 0x93, 0x03, 0x4f, 0xc6, 0x06, 0xdb, 0x84, 0x4c,
	0xaf, 0x82, 0x4f, 0x5d, 0x9b, 0x90, 0xe9, 0x15, 0x79, 0x0c, 0x0d, 0x3c, 0x3a, 0xa5, 0xf4, 0xbb,
	0x82, 0xab, 0x77, 0xc1, 0x67, 0xee, 0x52, 0xb0, 0xf5, 0xd8, 0x41, 0xe5, 0x03, 0x10, 0x1c, 0x3c,
	0x00, 0x85, 0xd6, 0x6b, 0x5a, 0x04, 0xf7, 0xb7, 0x4f, 0xc5, 0x9a, 0x16, 0xe8, 0x0c, 0x13, 0xb4,
	0x75, 0xf6, 0xb9, 0x75, 0xa6, 0x44, 0xb2, 0x75, 0x76, 0x1f, 0x3c, 0x34, 0xc1, 0x0b, 0x1e, 0x3c,
	0xb0, 0x47, 0xa6, 0x44, 0x12, 0x6e, 0x84, 0x49, 0x09, 0x4d, 0xd6, 0x98, 0xc4, 0x2f, 0xac, 0x57,
	0x2b, 0xe1, 0xa5, 0x28, 0xb8, 0x2c, 0x12, 0x5e, 0xa4, 0x62, 0x1e, 0x3c, 0xb4, 0x05, 0x64, 0x87,
	0x94, 0xd9, 0xc7, 0x18, 0xbf, 0xdc, 0x66, 0x1f, 0x4b, 0xcf, 0x03, 0xa8, 0x99, 0xbd, 0xe5, 0xd8,
	0x8c, 0x3c, 0xb2, 0x95, 0x05, 0x37, 0x86, 0x32, 0x79, 0x02, 0x4d, 0x2d, 0x35, 0x5d, 0xc6, 0x65,
	0x6a, 0xcf, 0xed, 0xa9, 0x1a, 0x30, 0x72, 0xf9, 0xdd, 0x15, 0x2f, 0xe4, 0x73, 0xf0, 0xd8, 0x94,
	0x3b, 0x57, 0xbc, 0x90, 0xc0, 0xe4, 0x6b, 0x38, 0xcb, 0xe8, 0xfb, 0x78, 0xdf, 0xa8, 0x6d, 0x8c,
	0x9a, 0x19, 0x7d, 0x3f, 0xda, 0xd9, 0x3d, 0x82, 0xfa, 0xf4, 0x83, 0xe6, 0x2a, 0xb6, 0x9c, 0x7b,
	0x62, 0x1d, 0x19, 0xa8, 0x6b, 0x78, 0xf7, 0x14, 0x5a, 0xd6, 0xa0, 0xe0, 0x8c, 0xa7, 0x6b, 0x9e,
	0x04, 0x5f, 0x59, 0x3f, 0x06, 0x8d, 0x1c, 0x68, 0x8e, 0x8f, 0xcf, 0x55, 0x2c, 0x57, 0x3a, 0x78,
	0xea, 0x8e, 0x8f, 0xcf, 0xd5, 0xcd, 0x4a, 0x9b, 0xdb, 0x81, 0xaa, 0x54, 0x04, 0x5f, 0x3b, 0x4a,
	0xf3, 0xb9, 0x1a, 0x08, 0xdc, 0xa9, 0x90, 0x1a, 0xe9, 0x15, 0x1b, 0x67, 0xc1, 0x37, 0x76, 0xa7,
	0x0e, 0xbc, 0x44, 0x6c, 0xbf, 0x7e, 0x3f, 0x3b, 0xa8, 0xdf, 0xe7, 0xd0, 0x70, 0x1c, 0xb6, 0xbe,
	0x7f, 0x60, 0xcf, 0x3f, 0x31, 0x14, 0x36, 0xfe, 0xdb, 0xd0, 0xdc, 0x59, 0x60, 0x60, 0xcf, 0x6d,
	0xda, 0x4b, 0x13, 0x0c, 0xee, 0x09, 0x34, 0x0f, 0x4a, 0x43, 0xf0, 0xc2, 0xec, 0xae, 0xb1, 0x5f,
	0x0d, 0x30, 0x5f, 0xd3, 0x95, 0xfa, 0x10, 0x63, 0x3f, 0x16, 0xfc, 0xd0, 0x18, 0x78, 0x08, 0x4c,
	0xd2, 0x8c, 0x1b, 0xa2, 0xe2, 0x33, 0x51, 0xd6, 0x93, 0x6f, 0x8d, 0xbe, 0x8e, 0x58, 0x59, 0x43,
	0x9e, 0x42, 0xcb, 0xbe, 0xc9, 0x5b, 0xa3, 0x8e, 0x3d, 0x43, 0x8b, 0x3a, 0xb3, 0xf6, 0xef, 0xa0,
	0x1a, 0x76, 0xed, 0x8b, 0x70, 0x06, 0xf5, 0x49, 0x38, 0x7a, 0x19, 0xbf, 0x1e, 0xbe, 0x1e, 0xf7,
	0x7b, 0xfe, 0x2d, 0xe2, 0x9b, 0xe7, 0xe6, 0x65, 0x1c, 0x76, 0xe3, 0x9b, 0x9c, 0x0b, 0xff, 0x88,
	0xdc, 0x03, 0xbf, 0x44, 0x7a, 0xa9, 0x32, 0xa4, 0xf3, 0x8f, 0xb7, 0x13, 0xc3, 0x6e, 0x1c, 0xbe,
	0x8d, 0xfc, 0x93, 0x7d, 0xb3, 0x88, 0x33, 0x89, 0x7b, 0xf2, 0xbd, 0x7d, 0x77, 0x57, 0x52, 0x29,
	0xdf, 0x6f, 0xff, 0x1e, 0xaa, 0x37, 0xee, 0x81, 0x68, 0x01, 0xdc, 0x8c, 0x26, 0xbb, 0xb5, 0x09,
	0xb4, 0x50, 0x9e, 0x0c, 0xae, 0xfb, 0xe3, 0x49, 0xf7, 0x7a, 0x34, 0xf6, 0x8f, 0x48, 0x03, 0x3c,
	0xc4, 0xc6, 0xdd, 0xf0, 0x17, 0xfe, 0x71, 0x39, 0xe3, 0xed, 0x38, 0xec, 0x5e, 0xf5, 0xfd, 0x13,
	0x52, 0x87, 0x2a, 0xca, 0xfd, 0x70, 0x68, 0xd7, 0x72, 0x42, 0x3c, 0xee, 0xf7, 0x87, 0xbe, 0x5f,
	0x22, 0xe3, 0x5f, 0x0d, 0xe3, 0x5e, 0x77, 0xd2, 0xf5, 0xcf, 0xdb, 0x7f, 0x3c, 0x81, 0xbb, 0x93,
	0x70, 0x84, 0x4d, 0xb4, 0x90, 0x4a, 0xa7, 0x4c, 0xd9, 0x57, 0xf5, 0x27, 0xd0, 0x4c, 0x05, 0xd7,
	0x71, 0x92, 0xd2, 0x79, 0x9c, 0xa9, 0xb9, 0xfb, 0x1b, 0xb8, 0xf3, 0x51, 0xcb, 0x1d, 0xd5, 0xd3,
	0x1d, 0x42, 0x3a, 0xd0, 0x34, 0x33, 0xcc, 0x1f, 0x09, 0x93, 0xcb, 0x6d, 0xc7, 0x3d, 0x72, 0x40,
	0xd4, 0x40, 0x7d, 0x29, 0x91, 0xef, 0xe0, 0x1e, 0x93, 0x62, 0x8e, 0xff, 0x0b, 0x52, 0xc4, 0x74,
	0x39, 0x97, 0x45, 0xaa, 0xdf, 0xd9, 0xe6, 0xa3, 0x16, 0xdd, 0xdd, 0xe9, 0xba, 0xa5, 0x8a, 0x3c,
	0x87, 0xd3, 0x35, 0xf6, 0xa9, 0xe6, 0x41, 0xc6, 0xce, 0xfb, 0xa3, 0xc6, 0xf5, 0xd5, 0xad, 0xc8,
	0x9a, 0x90, 0x6f, 0xe0, 0x34, 0x61, 0x9a, 0xe5, 0xae, 0x4b, 0x3f, 0xeb, 0x1c, 0x76, 0xa3, 0x68,
	0x68, 0xf4, 0xe4, 0x39, 0x78, 0xd3, 0x69, 0x11, 0xe3, 0xdf, 0x94, 0x79, 0xb5, 0xeb, 0x17, 0xcd,
	0xce, 0x7e, 0x77, 0xf3, 0xea, 0x56, 0x54, 0x9d, 0x4e, 0x0b, 0x94, 0xc9, 0x05, 0x80, 0x32, 0x2d,
	0x66, 0x5c, 0x36, 0x69, 0xf5, 0x8b, 0xbb, 0x9d, 0x8f, 0xbb, 0xce, 0xa8, 0xa6, 0x4a, 0x8c, 0x3c,
	0x03, 0x0f, 0x9b, 0x3e, 0xe3, 0xdf, 0x73, 0xfe, 0x0f, 0x6c, 0xab, 0x99, 0x95, 0xd0, 0x52, 0xb3,
	0xdc, 0x5a, 0xd6, 0x9c, 0xe5, 0x7e, 0xcc, 0x51, 0x55, 0xb3, 0xdc, 0x58, 0x3e, 0x85, 0xa6, 0x7a,
	0xb7, 0xd2, 0x89, 0xdc, 0x88, 0x38, 0xa3, 0x6a, 0x61, 0x1f, 0xc6, 0x57, 0x47, 0x51, 0xa3, 0x84,
	0xaf, 0xa9, 0x5a, 0xe0, 0x0f, 0x18, 0x5e, 0x1f, 0xa5, 0x69, 0x96, 0x9b, 0x57, 0xf2, 0x76, 0xb4,
	0x03, 0x2e, 0x6b, 0x50, 0x65, 0xcc, 0xac, 0x76, 0x09, 0xe0, 0x95, 0x13, 0x9f, 0xff, 0xe5, 0x08,
	0xbc, 0xb2, 0x8f, 0x42, 0x52, 0x0d, 0x86, 0x6f, 0xba, 0x57, 0x03, 0xe4, 0xe4, 0x19, 0xd4, 0x91,
	0x8c, 0x97, 0x57, 0x83, 0xf1, 0xab, 0x7e, 0xcf, 0x12, 0x12, 0xf9, 0x34, 0xee, 0x0f, 0xf1, 0x9f,
	0xc2, 0x49, 0x51, 0x3f, 0x7c, 0xe3, 0xdf, 0x26, 0x4d, 0xa8, 0xbd, 0x1c, 0x0c, 0xe3, 0xb7, 0xdd,
	0xc1, 0xe4, 0x3b, 0xff, 0x64, 0x5f, 0xbc, 0xf0, 0x4f, 0x51, 0x44, 0x6a, 0x1b, 0xd9, 0xaf, 0xe0,
	0xef, 0x48, 0x78, 0x75, 0x33, 0xee, 0xfb, 0x55, 0xa4, 0xb5, 0x19, 0x5a, 0x95, 0x87, 0x5e, 0xaf,
	0xba, 0xe3, 0x49, 0x8c, 0xa4, 0xaf, 0xe1, 0xdf, 0xcc, 0xd5, 0x60, 0x3c, 0xe9, 0x0f, 0x7d, 0xc0,
	0xd8, 0xd0, 0x72, 0x30, 0xfc, 0xde, 0xaf, 0x3f, 0x8f, 0xc0, 0xdb, 0x32, 0x8b, 0x40, 0x6b, 0x30,
	0x1a, 0x45, 0x37, 0x93, 0x9b, 0xdd, 0x7d, 0x3a, 0x83, 0x7a, 0x89, 0x4d, 0xc2, 0x91, 0x5f, 0xd9,
	0x07, 0x5e, 0xf7, 0x46, 0xfe, 0x1d, 0xbc, 0x20, 0x25, 0xd0, 0x0b, 0xc3, 0x91, 0xff, 0xf8, 0x12,
	0x7e, 0xed, 0x89, 0xe5, 0xb7, 0x86, 0xcf, 0xd3, 0x8a, 0xf9, 0xfc, 0xf8, 0xbf, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x98, 0x21, 0xe0, 0x97, 0x79, 0x0f, 0x00, 0x00,
}
